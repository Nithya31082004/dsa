#Given two strings s and t of lengths m and n respectively, return the minimum window substring of s such that every character in t (including duplicates) is included 
#in the window. If there is no such substring, return the empty string "".
#leetcode
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        t_count = Counter(t)
        window_count = {}
        have = 0
        need = len(t_count)
        res = [float('inf'), 0, 0]
        l = 0
        for r in range(len(s)):
            char = s[r]
            window_count[char] = window_count.get(char, 0) + 1
            if char in t_count and window_count[char] == t_count[char]:
                have += 1
            while have == need:
                if (r - l + 1) < res[0]:
                    res = [(r - l + 1), l, r]
                window_count[s[l]] -= 1
                if s[l] in t_count and window_count[s[l]] < t_count[s[l]]:
                    have -= 1
                l += 1
        l = res[1]
        r = res[2]
        return s[l:r+1] if res[0] != float('inf') else ""
